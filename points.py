def get_positions(filelist):
    '''
    Reads a list of IOF XML results files (filelist) and records the
    results into rposlistlist:

    rposlistslist
    |-rposlist (for race 1)
    | |-runner 1 - dict containing runner name, race, finish position
    | |-runner 2 - "
    | |-etc.
    |-rposlist (for race 2)
    |-etc.

    filelist can contain IOF v2 or v3 XML files

    '''
    # Go through results files and get everyone's result position from
    # every race
    import xml.etree.ElementTree as ET
    racenumlist = ["name"]
    rposlistlist = []

    # Load each file and make string for the race number
    for i, file in enumerate(filelist):
        
        # Read file and remove namespaces if they exist (IOF XML v3)
        it = ET.iterparse(file)
        for _, el in it:
            if '}' in el.tag:
                el.tag = el.tag.split('}', 1)[1]  # strip all namespaces
        root = it.root
        
        racenumstr = "race" + str(i + 1)
        # builds a list of strings corresponding to the sequence of races
        racenumlist.append(racenumstr)

        rposlist = []

        # take only the first class result in file. (sometimes there's a
        # reverse course or something at the end)
        for ClassResult in root.find("ClassResult"):
            # Now we're in a loop iterating through the person results
            for PersonResult in ClassResult.iter("PersonResult"):
                namestr = ""

                # Write the runners name to namestr
                for Given in PersonResult.iter("Given"):
                    namestr = namestr + Given.text + " "

                for Family in PersonResult.iter("Family"):
                    namestr = namestr + Family.text

                # Record rpos to determine if runner MP
                # IOF XML v2 stores it in ResultPosition,
                # IOF XML v3 stores it in Position
                for ResultPosition in PersonResult.iter("ResultPosition"):
                    rpos = ResultPosition.text
                for ResultPosition in PersonResult.iter("Position"):
                    rpos = ResultPosition.text
                    
                rposlist.append({'name': namestr, 'rpos': rpos,
                                 'racenum': racenumstr})

                ResultPosition.clear()
                rpos = None

        rposlistlist.append(rposlist)

    return rposlistlist, racenumlist


def men_women(womenlist, rposlistlist):
    '''
    Takes rposlistlist generated by points.get_positions and
    separates into a mens and women's rposlistlist.

    If the runners name appears in womenlist, she is a woman.

    Each dict in the rpll must have a name entry
    '''
    # Get the list of women names
    # women.txt has a woman runner's name on each line
    # It is read into a list of the name strings

    rpll_men = []
    rpll_women = []
    for race in rposlistlist:
        rpl_men = []
        rpl_women = []
        for runner in race:
            runnername = str(runner['name'])
            if runnername in womenlist:
                rpl_women.append(runner)
            else:
                rpl_men.append(runner)
        rpll_men.append(rpl_men)
        rpll_women.append(rpl_women)

    return rpll_men, rpll_women


def get_points(rposlistlist):
    '''
    Takes the rpll and produces namelist:

    namelist
    |-runner 1 - dict containing runner names, and point value entry for each
    |            race he/she has done
    |-runner 2
    |-etc.

    Points are awarded as shown in pointslist. If runner mispunched, rpos
    will equal None and the runner will be awarded 10 points.
    '''

    # This is an awkward way of building the list of point values
    # to awards to each runner
    # 1st value in the list is points for 1st place and so on
    pointslist = [100, 90, 81, 73, 66, 60, 55, 51, 47, 44, 41,
                  39, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28,
                  27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16]
    pointslist2 = [15] * 65
    pointslist.extend(pointslist2)
    pointslist.append(5)
    namelist = [{'name': 'wombat'}]

    for race in rposlistlist:
        rpointslist = list(pointslist)
        for runner in race:
            entry = next((item for item in namelist if
                          item['name'] == runner['name']), None)
            if entry:
                entry[runner['racenum']] = rpointslist.pop(0)
            else:
                entry = {'name': runner['name'],
                         runner['racenum']: rpointslist.pop(0)}
                namelist.append(entry)
            if entry and not runner['rpos']:
                entry[runner['racenum']] = 10
    return namelist
